package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _conf_ca_crt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\xcb\x92\xb2\x4e\x12\xc5\xf7\x3c\xc5\xec\x3b\x26\x40\x11\x91\x65\x5d\xb8\x5b\x60\x41\x71\x73\x07\x82\x28\xd0\x8d\x28\x50\xc2\xd3\x4f\x74\x7f\x31\x33\x1d\xdf\xbf\x96\x27\x7e\x99\x75\x32\x4e\x46\xfe\xfb\xfb\x41\xdd\xb4\xbd\x7f\x21\x3d\x60\xb6\x61\x23\xc0\xf4\x1f\x55\x20\xb6\x8d\x97\x15\x21\xf0\xf4\x6b\xc0\x6d\x08\x6a\x3b\x8a\xcf\x0f\x39\x2d\xc5\xfe\xf5\x05\x86\x13\x49\x13\xb7\xf1\x07\x4a\x92\xf6\x24\xdb\x1c\xd3\xcc\x71\xfb\xb3\x7d\x9b\x2f\x1e\xa0\xfa\x51\x80\x14\xf0\x92\xe9\x47\x02\x5a\x13\x6c\x22\x1d\xde\x08\x0a\xa3\xdd\x1b\x37\x80\xc0\xda\x8b\x21\xa8\x09\x8c\x82\xae\x30\x6f\x0f\x42\x77\x1c\x83\x0c\xc7\x94\x5a\x18\xc4\xfa\x39\x79\xf7\x42\xce\x74\x42\x40\xff\x53\x8c\x6a\x8e\xa9\xa4\x79\x84\x72\x8e\xea\x1f\xf0\x88\x81\xe7\x47\x1b\xf0\x46\x2b\x70\xfe\x34\x24\x04\xb4\x1e\x24\x81\xc4\x4d\x9e\x39\xc2\xff\xed\xb4\xd0\xa8\x95\xb5\x4c\x21\x2f\x64\x47\xa2\x66\x39\x97\x77\xe5\x51\x34\xa0\x32\xb8\xb4\x10\x06\x24\xc2\x6c\x4e\x56\x2a\x13\xe6\xe4\x06\x97\xa4\x6f\x4d\x20\xf8\xf2\x3f\x91\x58\xd1\xaf\x9f\x32\x06\xda\xce\xff\x65\xdb\xfe\xaf\xed\x9c\xe9\x3e\x01\xfc\xc7\xb5\x00\x39\x37\x02\x33\x7e\xe5\x66\xfb\xc6\x18\xb8\x7f\x8a\x7b\x02\x24\xef\xc4\x7e\x8f\xc7\x39\x66\x9d\x47\x09\x7d\x71\x44\x7f\x1a\x62\x0c\x1c\x2c\x50\xa6\x97\x04\xbe\x4c\x14\x0e\x66\x68\x17\x32\xa6\xba\x03\x82\xcc\xbf\xc8\x31\xbf\x98\xda\x52\xea\xf0\xab\x90\xb3\x29\x4f\x76\xbc\xae\xf5\x3b\x01\xd2\x6f\x16\x0a\x80\x46\x00\xec\x6c\x88\x39\xf8\x06\x5c\xd0\xdb\x10\x50\x5c\x8d\x51\x90\x7e\xea\xbe\xbc\x6d\x23\xef\x19\x9e\x4e\x1b\xae\xf4\x79\xfa\x4e\xb5\x73\xb6\x4d\x3f\x4d\xed\x6e\x0d\x39\x7c\xd3\x5a\x40\xfd\x92\x89\x4c\xee\x5d\xd8\xdf\xb4\xe8\x6d\xe1\x0a\xfb\xb7\x53\x3e\xe1\xfa\x8b\x19\xe3\x33\x45\xe7\x60\xdd\x9c\x8e\xe7\xa9\xa3\x6f\x71\xeb\xcd\xf6\xc1\x3a\x21\x57\x4a\x1e\x2e\x40\x97\x43\x47\x04\xd5\xc2\x51\x8e\xab\x11\xf9\xa5\x53\xcc\x4d\x05\x9f\xd0\x0a\xfc\xd8\xb2\x52\x3e\x54\xc9\x94\xcc\x7b\xbc\x31\xc7\xd8\xb4\x64\x3e\xc9\xf7\xc3\xb6\xcf\x33\x7f\xda\xdc\x3f\x5f\x47\xe8\x0c\xcc\xbb\x0a\x30\xb6\x50\xb0\x92\x69\x77\x88\x3f\xae\xa3\x13\x02\xff\xd2\xbe\x2e\x57\xc7\x6a\x45\x95\x34\x8e\xe4\xe2\x32\x29\x0e\x27\x05\xe0\xee\xe1\x7e\x74\xc7\x66\xd9\xdb\xad\x7e\xc9\x7d\x87\x5d\xfb\x45\x9d\x85\x27\xe9\xfc\xc3\x19\xb4\x5b\xd8\x8d\xb7\xf1\x5d\xec\xf5\xdd\x07\xe0\x75\x78\xf6\xe6\xf0\xec\x19\x99\xe6\xb3\x67\xa7\xde\xd6\xfc\xa8\x5e\xfb\xe7\x6e\x1b\xcb\xe4\xb6\xd1\xdf\xdb\xa6\x25\x64\x7b\x6c\x3d\x61\xc5\x57\x6d\x71\x24\xb5\x91\x9c\x59\xcd\x24\x8f\x4a\x87\xd3\x31\x93\x4a\x79\xe6\xc7\x5c\x32\x66\x77\x77\xd3\x36\xda\xd4\x9a\x27\x3f\xfe\xde\x6a\x00\xcc\x26\x5a\x61\x40\xa0\xf4\x1d\x6f\x29\xe0\x9a\x26\x10\xd2\xa7\x39\x3d\xfc\x43\xf5\x9c\x36\xd6\x75\xd1\xde\x6e\x69\x04\xfb\x21\x1f\xba\xa7\xd3\x80\xeb\xf7\x6e\x58\x21\xd1\x4d\x0c\x92\xfa\x2f\x56\xf8\x0b\x3e\xfd\xc0\x01\x81\xe0\x7a\xd0\x21\x03\x18\x50\x4b\xfc\x3b\x7b\xc4\xff\x44\x0f\x28\xf2\x84\x22\x6b\x44\x43\xdc\x8d\x51\x76\x59\xe7\xe2\x12\x3d\x06\x5e\xf2\x0a\x6d\x26\x9e\x2f\x2d\x64\xa7\xc1\xdd\x1f\x67\x3f\xfc\x88\xe8\x23\x0d\xe9\x78\x13\xd5\xeb\xeb\x5a\xb7\x6f\xb1\x10\x47\x75\xd3\x34\x42\xbe\x55\x5a\x5d\x15\xc3\x7c\x34\x36\x2c\xe2\x88\xbd\xcc\xb4\x9b\xab\xf8\x98\x8a\x5e\x95\x5c\x07\x82\x1f\xfb\x06\x5b\x35\x35\x07\x7d\xc5\x55\xe0\x8a\x73\x30\xea\x9e\x7c\x0b\x42\xc7\xee\x73\x45\xc8\x3b\x57\xba\xab\x45\x10\x6a\x88\xa4\xbd\x62\x47\x9f\x5a\x5e\x5e\xd1\xbd\x97\xc4\x0f\x1f\x25\x07\xb8\x98\xd5\x30\x07\x52\x5c\xa8\x4a\x12\xaf\xda\xfe\x91\x28\x5a\x62\x5d\x22\x4b\x81\xd6\xd9\x78\x08\x56\xba\xf3\x6e\x13\x58\x68\xb7\x18\x2a\x33\x9f\xc0\xbd\xd8\xc1\x84\xf7\xfb\xc7\xd3\x1b\x1f\xf6\x45\x54\x9b\x29\x6d\xc0\xa2\x6f\x67\x65\x17\xb3\xf5\x73\x28\xbc\x24\x3e\xc0\x19\x21\x89\xdf\xd3\x58\x78\xa3\xea\x26\xbd\x78\x6f\x2c\x92\x32\xa6\x70\xf8\x54\x1c\x75\x1a\x34\x2f\x2c\x5f\x99\xc8\xb1\x6b\x5a\x5b\xc5\x73\xeb\xee\x8b\x6f\xc7\x8c\x3d\x8f\xf2\xea\xdd\xdd\xa0\x3a\x4b\xe7\x76\x2e\x55\x3f\x12\x52\x9a\x8e\x3e\x23\xc8\xdf\xb8\x40\x64\x26\xac\x12\x66\x08\x3f\xe7\x52\xf7\xf0\x3f\x4f\xe8\x7f\x02\x00\x00\xff\xff\x79\x4e\xf7\x56\x5f\x05\x00\x00")

func conf_ca_crt() ([]byte, error) {
	return bindata_read(
        _conf_ca_crt,
		"conf/ca.crt",
	)
}

var _conf_client_pem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x96\xb9\xb2\xab\x4c\xb2\x85\x7d\x9e\xa2\x7d\xc5\x0d\x66\x24\x19\x6d\x14\x50\x20\x40\xcc\x33\x1e\xf3\x3c\x08\x10\xd3\xd3\xdf\xd8\xfb\x44\x74\x9f\x8e\xbf\xcc\x15\x2b\xb3\xbe\x2a\x23\x57\xfe\xdf\xcf\x61\xa1\x28\x69\xff\x32\x2c\xc9\x03\x0e\xfc\x97\x02\xc3\x5f\x15\x51\x25\x09\x6e\xa5\xc4\x02\x1e\x68\x6c\xd9\x7e\xaa\xb6\x16\x9f\x3b\xc6\x02\x13\x0a\x00\xd8\x1c\xab\x94\x7b\x59\xda\x2d\x28\x21\x00\xa3\xc4\x02\x93\x9f\xeb\xf9\x31\x90\x2d\x8a\xb5\xac\xea\x22\x9a\x5b\x3d\xdb\xf0\x74\x74\x3e\x2c\xbc\xae\x60\x65\xc7\x4b\x2b\x4b\x48\xc7\xe9\x5b\xe9\x6d\xbb\x07\x62\x54\x9b\x82\x7c\xda\x4d\x36\xea\xaf\x53\xef\x52\x92\x88\x7c\x9a\x1d\x6f\x74\xf4\x31\xeb\x14\x59\x0c\x2a\x42\x81\x67\xba\x59\x81\xab\xe9\x82\xd3\xe6\x1c\x65\xfa\x27\xcb\xd2\xc3\xd0\xec\x7b\x3e\x09\x59\xc4\xbd\x33\x1c\x4e\x75\x06\x2f\x3c\x30\xe7\x93\xa3\x66\x28\xad\x00\x56\x23\xcc\x42\x64\x9e\xf6\x3b\x7e\x7f\x07\xd5\x6d\x15\x3f\xaf\xbb\x90\x4e\x98\xe6\xb2\xdf\x39\x41\x77\x52\x37\xb9\xf8\x15\x13\x40\xbe\xba\xc0\x57\x1c\xc1\x7b\x46\x93\x35\xe7\xb2\xb0\xab\xc1\xfb\xa6\x8e\x84\xf9\xa4\x91\x60\xb0\xab\x9e\xcc\x6a\xd1\xda\x69\x1d\xbd\x48\x8e\xaa\x2e\x87\x59\xf5\x1e\x3a\xaf\xc2\x59\x8e\xd0\x2f\x24\x68\x9f\x4a\x5c\x1b\x0a\x91\xf1\x8d\x1b\xb4\x51\x36\x88\x94\x3b\xe5\x7a\x7e\x7b\xac\x48\xc7\xd9\xb3\xd5\xc3\xb9\x2a\xb3\x63\x48\x9e\x2b\xef\x95\xbc\x74\xef\xd0\x15\xc6\xad\x41\x26\xcf\x55\x90\xa2\xdb\x5b\x62\x0f\x9b\x55\xe5\xbb\xdf\xd9\xe4\x9b\xd9\xe5\xc7\x96\xc8\x77\xba\x7e\xb3\x2a\x42\x37\xf7\xaf\x8c\x77\x11\x28\x55\x16\x00\xc8\x95\x25\x04\xe1\xcc\x82\x2a\xe0\x3d\xc5\x03\x66\xd0\x83\x9d\x6c\x0d\xb7\x0b\xe8\x1d\x5f\xe5\x2b\xe3\x99\xee\x44\x31\x59\xe4\xc7\x2c\x34\xe1\x8a\xe0\x17\xbb\x9d\xfe\x65\x90\x63\x6b\x72\x28\xea\x13\xc2\xe2\xdd\x1f\xe4\x81\xe1\x4d\xf1\x2e\xb6\x8d\x58\x1e\xd5\x97\x5f\x3f\x8f\x71\x95\xa4\x7b\x13\x1a\x2b\x11\x0c\xb6\xfa\xa9\xca\x6b\x79\x2b\x85\x84\x10\xe3\x18\xdf\xb6\x82\x40\x8b\x75\x9e\xb9\x83\x29\xc1\x7e\xd7\x52\xf4\x5d\x9e\x18\x88\x85\xae\x8e\xf1\x59\x98\x6c\xb8\xc0\xb9\xec\x54\x23\x66\x5e\xdb\x84\x7f\x1c\x4f\x77\xa7\x2c\x96\xe6\xc3\x47\x26\x3a\x89\x6f\xd5\x68\x81\x61\x72\xfa\xdb\xcd\x1a\x77\x4d\x71\x4f\xd5\x93\xee\x3e\x99\xb0\xd1\xb2\xb8\xd8\xe3\x59\x45\x42\x52\x7c\xfc\xdb\xb2\xc8\x93\xc0\xd4\xa1\x3a\xe9\x62\x5d\x64\xaf\xe0\x5d\x22\x22\x19\x1c\x19\xf0\x5f\x51\x8e\x3b\xcc\x87\xf9\x26\x49\x14\xb4\x3a\x19\xe5\x20\xe9\xde\xb5\x11\x7c\x3c\x51\x1a\xaf\xc6\x04\x78\x20\x2f\x34\x9c\xd4\x19\x15\x89\xd0\x4c\xef\xc5\x8d\xce\xb9\xb3\x43\xc8\x9b\xbe\x10\x19\x01\xfa\x34\xf5\xb3\x8d\xe2\xee\x61\xfe\x70\xa2\xae\x55\xa4\x2b\xdd\xb9\xd3\x0e\xe8\x2b\x88\xbc\x86\x57\x4d\x85\x2d\x4d\x9e\xac\xd5\x0f\x0b\x6c\x48\x97\x80\xb3\xe2\xca\xf5\x10\x70\xf9\xac\xf8\x7a\x36\xed\x3d\x2d\x7a\x1c\x8a\x1c\xc7\x58\xa1\x3a\xd1\x38\xb3\xc1\xdd\xc0\x03\x92\x3d\x15\xf9\x49\x15\xb5\x2a\xb8\xab\xac\x7e\x70\x01\x75\x47\x77\xf3\x44\xe2\xe9\x50\xca\xf7\x85\x5c\xaa\x62\xe2\x2d\xd0\x22\xcc\xdd\xb2\x92\x1f\x05\xad\x18\xde\xcf\x2b\x7b\xd3\x63\xac\xf8\xb4\x6f\x1c\x5f\x90\x68\xfa\x6c\xa1\xd0\x4c\xfd\x7e\x21\x62\xd4\x76\x8a\xe3\xba\xb1\x79\xe1\x38\xaf\x0d\xd1\xd7\xcf\xa1\xc5\xbd\x2d\x5f\xc6\xb5\xdb\xc6\xad\x90\xf7\x1b\x87\xc6\x36\xfd\x07\xf9\xea\x8d\x20\x8c\x51\x66\x1e\x6f\xea\xf0\x0d\xe7\x0a\x8b\x64\x4e\x5a\xaf\x38\x0c\x81\x98\x5d\xa4\x8f\x78\x65\xde\x38\xa9\xae\xac\x66\x68\x90\x51\x50\xda\x8a\x05\xf0\x29\xf7\x56\x43\x0e\x6d\x69\xd2\x42\x52\x19\x32\x52\x28\x1e\xfa\x93\x81\x28\xc4\x27\x1f\x06\x89\x7a\x57\x2a\xfe\xd5\x09\x33\xc7\x20\x94\x23\xcb\x97\xca\x04\x64\xc7\x24\xd8\xeb\x73\xea\x59\x66\x72\x51\xce\x8b\xde\xf3\x50\x5e\x43\x4f\x24\xa3\x53\x7a\x79\xc8\xaf\x15\x35\x7d\x9e\xe8\xe1\x2c\xf1\xb9\xb0\xe8\x70\x60\xa5\x4e\x37\x07\x42\xd9\x29\x6b\xac\x0a\x1b\xfd\x22\x73\xf3\x33\xd5\x28\xfb\xac\xab\xd1\x7f\xf3\x63\x1b\x5d\xdc\x70\x1b\xe9\xcb\x08\x25\x97\xca\xf9\x0d\x70\xfd\xfb\x64\x61\x65\x07\x40\xb0\xef\xe3\x1c\xa5\xc8\xb9\xd9\xe3\x14\xf4\xd6\x36\x65\xa6\x68\x4a\xfc\xb1\xf9\x33\xe3\x8a\x19\xac\x47\x75\xdf\x9f\x7d\xf3\xe0\x98\x26\x3a\xd9\xe5\xb2\x20\x2a\x60\x18\x69\x06\x28\x6a\x97\xb1\x24\xde\xbc\xd9\x56\x2c\xa4\x7b\xfa\xb3\x92\x3f\x38\xa1\x65\xe5\x0a\x80\xe7\xcc\x9e\xe6\xa4\x9e\x58\xc8\xe0\x42\x14\x6a\x3c\xdb\x16\xfe\xfe\x68\x58\x8f\xf9\x0c\x0b\x85\x75\x47\xb2\xb6\xe8\xf5\x71\xc3\x1f\x62\x68\xda\x48\x2e\x43\x97\x57\x1d\x5f\x0b\x65\x2e\x70\xd3\xaa\x25\xf2\x84\xe9\x6f\x98\x8b\x1f\x77\xb5\x50\xbc\xf4\xd6\x60\x0b\x2f\xed\x27\xfb\xae\xef\x27\x34\x18\x26\x8e\x31\x0b\xff\x1c\x5e\x14\x07\xc7\xb7\x43\x54\x55\x35\xc6\x87\xeb\x1d\x4e\xf8\x95\x5e\xc5\xcb\x75\x4f\x58\x06\x58\xed\xa1\xa9\x8f\xd5\xd5\x8b\xab\x38\xb9\xb2\x07\x32\xe4\x1c\xff\x43\xbf\xfb\x7a\x63\xa8\x8b\x2c\x69\x43\x3f\x43\xc7\xac\x36\xe4\xa4\x86\x99\xb0\x6a\x05\x0d\x1e\xd3\xe1\xe1\x82\x36\x40\x57\xa7\xe7\xaf\x9b\xaf\x16\xca\xf7\xef\x9e\x71\xf8\x94\xdc\x26\x30\x8a\x2c\xd0\xa3\x32\x75\xbc\x9a\x88\x05\x21\xb9\xe3\xb9\xb5\x44\x16\x92\x12\x76\x6c\x95\x61\xa9\x24\xed\x5b\xc8\xc7\xef\xe3\x6a\x6d\x55\x08\x8c\x04\x56\x12\xf9\x76\x85\x5c\xf7\x0c\x43\xe4\x9b\xd1\x7c\xbb\x8e\x2a\x3d\xd0\x54\x6d\xbb\xd3\x8d\x28\xeb\xfb\xc4\x1e\x41\x86\x48\x40\x2a\x59\xf4\x69\xa1\xe4\x82\x95\x0e\x26\xcc\xd4\x5e\x70\xb5\xbe\x4f\xe6\x3e\xb4\x51\x30\x25\x54\xc7\xe1\xed\xe5\x7c\xb4\xb3\x35\x05\xf9\x6b\xc6\xbc\xa3\xdd\x13\x7f\x6d\x61\x67\x5d\xc2\x17\x29\x26\x69\xe2\x54\xff\x76\xc3\xb9\x62\xb0\xea\x85\x6f\x70\x94\x02\x2f\x1e\xf9\xcd\x1d\xa8\xf1\xff\xcc\xa2\xbf\x72\x8a\x83\x96\x23\x09\x12\x07\x1c\xf8\x9f\x9c\xe2\x33\x87\xe3\x40\x87\x71\x02\x8b\x3e\xeb\x07\x87\xe7\x6f\xb6\x7b\x54\xcd\x8c\x8b\xfa\xa5\x8c\xb5\xfd\x49\x9e\x91\x0a\x30\x91\xb3\x3f\xa2\x2d\x25\x24\x6f\x42\x96\xdb\x5d\xa0\xbe\xdc\x03\xe1\x2e\x20\xb3\xa5\xe6\xb1\x20\x74\x40\xdb\xe9\xaa\x49\xed\x3c\x08\x79\xcf\x34\x25\x1e\x78\x30\xf2\x8f\x31\x76\xa0\xae\x82\x5d\x04\xb8\x0b\xd9\x7d\x17\x2c\xd1\x5b\x62\xb1\x3d\x78\x1e\x28\xc8\x9f\xe2\x51\x05\x98\x66\x38\x0e\x54\x55\x30\xfe\x1a\xb9\x7d\xe7\x9d\x4e\x33\x55\x73\xd9\x39\xf3\xb7\x21\xcf\x03\x99\x37\x1d\x98\xa9\xec\xf2\x1f\x1a\x84\x37\xa1\x0c\xac\x50\x4f\x49\x6f\x4f\xc5\xe7\x99\x41\x76\x48\xc8\xf0\x1b\xfb\xd4\xfe\xaa\x52\x4d\x6d\xe0\xae\xf1\xf0\x54\x79\x15\xd3\x2e\x78\xfa\x55\xaa\x69\xfc\x8f\x06\xc8\x1f\x0d\xf9\x15\x1b\x96\xfe\xeb\x26\x11\xee\xb2\xec\x34\xff\xc5\xe6\xc0\x5f\xd8\x0d\x50\xff\x50\xa7\x2a\xeb\x5a\x1d\x92\x88\xd5\xa4\x9a\xfb\xce\x95\xbf\xc5\x0a\x0f\x34\xde\xc1\xb0\xdf\xf7\xfd\x31\x2e\x2a\xc0\x68\xc7\xe5\xa1\xf1\xf3\x91\x3f\x0d\xc1\xbe\x8b\x26\x76\xc8\x96\x4b\xbb\x88\x6a\x61\xbb\xb8\x87\xb2\x32\x46\x52\xb5\xa5\x1a\x30\x5b\x56\x28\xe9\x2b\x0b\xd8\x3d\x21\x65\xcc\x14\xb3\x2d\xab\xe9\x29\x69\x38\x0e\xd8\xd2\xce\x9b\x7f\x7b\x21\x8b\xb0\x26\xe0\xcb\x12\x1a\x80\xe7\x38\x60\x8e\x3f\x41\xc7\x02\xfd\xab\x6c\x67\x91\x3b\xa8\x6d\xc2\xc3\xc4\xed\x17\x61\x35\xb2\x4a\x69\xd5\xd3\xf7\x1e\xb0\xd3\xbc\x53\x80\xde\x59\xf7\x0c\x64\x10\xdb\x61\xd3\xa8\x97\x81\x3b\xc8\x8a\x46\x94\x54\x21\x31\xde\x55\x44\x5d\xd2\x8a\xcd\xbd\xeb\x27\x4e\x3e\x77\xb4\x1a\x1e\xac\xc7\x5a\x38\xea\x1e\xe7\x15\x74\xdc\xda\x61\xcc\x84\xe3\x17\x7c\xe0\xc8\x7b\x65\x5a\x0f\x6f\xa5\x95\x74\xed\x5e\xc6\x1c\xc3\xcb\xb8\x4d\x7a\xd7\x8b\x59\x63\xc0\x16\x4b\x0b\xaf\xbf\x03\xbf\x05\xcb\x9a\xbf\x18\x2c\x1e\x8b\xc5\x3b\x07\x13\x37\x45\x66\xdd\x50\x3e\xa5\x11\x20\x8f\xd9\x1c\x82\x41\xf7\xb2\x70\x52\xbd\x00\xef\x3b\x71\xa5\xda\x00\x1c\xe9\x46\x9d\x4d\xc4\x93\x5d\x9e\x29\x62\x92\x11\x52\xf4\xe2\xdb\x3b\x6a\xa4\xef\xfa\xa5\x19\x1f\x8c\x09\x2d\x35\x7b\x22\xfa\x25\x54\xd1\xa3\xb4\xde\xd2\xf4\x91\x1e\x73\x84\xe9\x9a\x95\x5b\x1d\x91\x26\x95\xdd\x51\xf4\xfd\x7e\x12\xae\xac\xac\x62\x68\x7f\x45\x96\x14\xb3\x8d\xc0\x34\x1f\xa8\xcd\x37\xb8\x61\xd6\xc7\x44\x91\x1f\xc5\xad\x06\x6a\x29\x5f\x82\x04\xf7\x61\x8d\xbd\x77\xba\xcd\x60\x38\x9f\xcb\xb0\xf5\xd2\x02\xaf\xde\xf8\x52\x83\xef\xb5\x1c\xd8\x21\x00\xce\xff\xee\x76\x08\x30\x17\x01\x00\x9d\x03\x26\x04\x98\x9a\xb5\xe6\x38\xba\x2d\xf6\xf1\xc4\x1e\x8c\x01\x4a\xa0\x1a\x16\x0f\x36\x9c\x4e\x9f\x1d\x2c\xbb\x8d\xac\xc2\x71\x86\xef\x42\xf2\x0e\xa8\xeb\x7b\x7b\xcb\x91\xdc\x0d\x83\x40\x49\x92\x53\x61\xea\x7e\xd4\xb3\x47\x6c\x8b\xcf\x66\xda\x04\xe2\xdd\x48\xbc\x31\x88\x17\x90\x89\x5e\x09\x83\x83\x52\xcc\x13\x53\xd0\xb9\x17\xdf\xfd\x3b\xd6\xec\x9c\xae\x4f\x5a\x44\x94\x29\x46\x8b\x02\xc7\xa4\x89\x52\x8d\x83\x7f\xa1\x96\xc6\xcc\x17\x81\xa3\xa1\x30\xdd\xe4\xb1\x11\x6c\xd9\x7f\xdc\xbd\xe4\x22\xc0\xe0\x27\x17\x64\xc6\x74\xd1\x1b\x92\xba\x89\x1a\x59\x12\xbd\x87\xd0\x36\x29\xe6\x45\xe1\xbc\xcc\xec\xc0\x80\xf9\x3d\x9c\xeb\x88\x8a\x56\x20\x3c\x9f\xe5\x23\x0e\x3e\xfc\xdb\x75\xbd\xa6\x93\x98\x3f\x82\xee\x05\xe1\x94\x5d\xdf\x68\xf2\x31\x2a\x72\xc6\x6b\x1e\x74\x04\x95\xf9\xa3\x94\x6f\x37\xdf\x31\x94\xb1\x9d\xae\xe0\x4c\xd7\xdd\xe0\xe6\x60\x8e\xa3\x95\xef\xaf\xbb\x50\xe1\x8f\x9a\x3d\x5e\xd0\x50\x07\x7a\x36\x34\x6f\x10\xcb\xf1\xbb\xbd\x54\x3c\x0d\x9e\x31\x8b\x6c\x42\xcb\x09\xb9\xb9\xdd\xaa\x55\x3c\x3f\x7a\xdd\x25\x5c\x3a\x02\xe9\x52\x14\xf6\xd5\x5e\xe2\x3d\x31\xff\xfd\xef\xff\x0e\xbb\x7f\x0c\xb4\xff\x0f\x00\x00\xff\xff\x92\xdf\x51\xdd\x95\x0b\x00\x00")

func conf_client_pem() ([]byte, error) {
	return bindata_read(
        _conf_client_pem,
		"conf/client.pem",
	)
}

var _conf_conf_ini = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4d\x6e\xdc\x30\x0c\x85\xf7\x3a\x05\x31\xde\x4e\x54\x8f\xff\x27\x85\x16\x5d\x16\x41\x56\x59\x06\x41\x41\xd3\x74\x47\xb0\x2c\x19\x12\x9d\xc0\xb7\x2f\xe6\xa7\x9d\x2c\x7a\x80\xec\xf4\xe9\xf1\x11\x7c\x20\x5f\x29\x78\xcf\x24\x36\xf8\x37\xb5\x84\x28\xe6\x50\x55\xa5\x22\x34\x84\x9a\xa2\x28\xe2\x28\x86\x9c\x65\x2f\x7a\xe1\x59\x4d\xbc\x7d\xc6\xc4\xf1\xdd\x12\x1b\x48\x81\xa6\xa4\x32\x10\x97\xbe\x4d\xb4\x28\xeb\x5f\x24\x32\xce\x46\x5c\x52\x61\x95\x4f\x94\x01\x9d\x98\x26\xa0\x13\x7a\xcf\x0e\x92\xa0\x30\xf0\x3b\xc7\x0d\x76\x17\x69\x07\x89\x29\xf8\x21\xa9\x0b\x9a\x43\xae\x32\x88\x7c\x9b\xf5\x9f\xf1\x66\x89\x2c\x71\xbb\x5b\x2e\x68\x6a\xa5\x5e\x7d\x18\xf8\x4d\xcd\xe8\xf1\x37\x47\xe3\x02\xa1\x3b\x85\x24\x8f\xc7\x73\xc4\x0c\xce\x32\xe0\x30\x44\x4e\x09\x9c\x4d\xb2\x4f\xbc\x44\x14\x1e\xa0\xdf\x60\xb7\xdf\x41\x88\xb0\xfb\xbe\xdb\xc3\x87\x75\x0e\x7a\x06\xf6\x14\xb7\x45\x2e\x3a\x85\xf9\x89\xb7\xa4\xce\x5d\x92\x81\x43\xd1\xea\x5c\xe7\xfa\xf0\xd8\x55\x55\xb9\xff\x1a\xa8\xb2\xff\x4e\x77\xff\x2e\x8f\xba\x3e\xea\xe6\xa0\xcb\x9b\xbd\xa9\x75\x51\xe8\xa2\x3a\xe8\x2a\xbf\xd6\xde\x72\x9a\x73\xe0\x79\xf5\x96\x50\xf8\xd7\xc4\xdb\xfe\x8b\xb1\xca\xc0\x61\x92\xeb\x56\x97\xb5\x77\x96\x60\xe2\x0d\xd2\x09\x8b\xba\xb9\x9e\x5c\x5a\xe7\x3d\xbc\x73\xb4\xe3\x76\x2f\xd6\x00\x80\x5e\x2c\x3c\xa3\x7f\xf8\xe9\x1f\x9e\xed\x30\x38\x7e\xf8\x21\x82\x34\xa9\xec\xba\x7c\x1f\xe4\x76\xb5\x76\x84\xc4\x02\xbd\x43\x3f\x69\xb5\xac\xfd\x13\x6f\x2f\xeb\x6c\xb0\x46\x2a\x47\xae\x8e\xd5\x80\x7d\x9f\x77\x65\x4d\x0d\x35\x79\xd1\x60\x5e\x8c\x79\xdb\x76\x55\x51\x8c\x79\xdf\x15\x5d\x39\xe4\x63\x3b\x96\x3d\x77\x25\x35\x88\x75\xcb\x15\xb6\xac\xd4\xeb\x8c\x49\x38\xbe\xa9\x35\x71\xf4\x38\x33\x18\x88\x21\x88\x5a\x30\xa5\x8f\x10\x07\x30\xf0\xf7\xa9\xfe\x04\x00\x00\xff\xff\x39\xd3\x00\xad\xb9\x03\x00\x00")

func conf_conf_ini() ([]byte, error) {
	return bindata_read(
        _conf_conf_ini,
		"conf/conf.ini",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"conf/ca.crt":     conf_ca_crt,
	"conf/client.pem": conf_client_pem,
	"conf/conf.ini":   conf_conf_ini,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"conf": &_bintree_t{nil, map[string]*_bintree_t{
		"ca.crt": &_bintree_t{conf_ca_crt, map[string]*_bintree_t{
		}},
		"client.pem": &_bintree_t{conf_client_pem, map[string]*_bintree_t{
		}},
		"conf.ini": &_bintree_t{conf_conf_ini, map[string]*_bintree_t{
		}},
	}},
}}
